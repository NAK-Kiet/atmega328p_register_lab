
lab5_pwm_timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cf  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ca  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000387  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  00001cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001fdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_1>
   8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	// Inverting Mode
	// Frequency = F_cpu/ 512*N = 16*10^6/ 512*8 = 3906.25Hz
	// OCR1B = 512 - 512*D/100;
	OCR1B = 511 - ((512*duty)/100);
	TCCR1A = (1<<COM1B1)| (1<<COM1B0) | 1<<WGM11; // inverting Mode and Fast PWM 9-BIT
	TCCR1B = (1<<WGM12) | 1<<CS11; // Prescaler 8
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	8d bb       	out	0x1d, r24	; 29
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  9c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  a0:	78 94       	sei
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x12>

000000a4 <_Z12pwm_10bit_imm>:
}
void pwm_10bit_im(uint32_t duty){
	// Inverting Mode
	// Frequency = F_cpu/ 1024*N = 16*10^6/ 1024*1 = 15625Hz
	// OCR1B = 1023 - 1024*D/100;
	OCR1B = 1023 - ((1024*duty)/100);
  a4:	05 2e       	mov	r0, r21
  a6:	5a e0       	ldi	r21, 0x0A	; 10
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	88 1f       	adc	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	5a 95       	dec	r21
  b2:	d1 f7       	brne	.-12     	; 0xa8 <_Z12pwm_10bit_imm+0x4>
  b4:	50 2d       	mov	r21, r0
  b6:	24 e6       	ldi	r18, 0x64	; 100
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodsi4>
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	93 e0       	ldi	r25, 0x03	; 3
  c6:	82 1b       	sub	r24, r18
  c8:	93 0b       	sbc	r25, r19
  ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A = (1<<COM1B1)| (1<<COM1B0) | (1<<WGM10) | 1<<WGM11; // Inverting Mode and Fast PWM 10-BIT
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | 1<<CS10; // Prescaler 1
  d8:	89 e0       	ldi	r24, 0x09	; 9
  da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  de:	08 95       	ret

000000e0 <__vector_1>:
void pwm_8bit_im(uint8_t duty);
void pwm_9bit_nm(uint16_t duty);
void pwm_9bit_im(uint16_t duty);
void pwm_10bit_nm(uint32_t duty);
void pwm_10bit_im(uint32_t duty);
ISR(INT0_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_1+0x28>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_1+0x32>
 112:	00 00       	nop
	_delay_ms(50);
	if (bit_is_clear(PIND,PD2)){
 114:	4a 99       	sbic	0x09, 2	; 9
 116:	13 c0       	rjmp	.+38     	; 0x13e <__vector_1+0x5e>
		duty1 += 10;
 118:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <duty1>
 11c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <duty1+0x1>
 120:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <duty1+0x2>
 124:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <duty1+0x3>
 128:	0a 96       	adiw	r24, 0x0a	; 10
 12a:	a1 1d       	adc	r26, r1
 12c:	b1 1d       	adc	r27, r1
 12e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <duty1>
 132:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <duty1+0x1>
 136:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <duty1+0x2>
 13a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <duty1+0x3>
	}
	pwm_10bit_im(duty1);
 13e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <duty1>
 142:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <duty1+0x1>
 146:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1+0x2>
 14a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <duty1+0x3>
 14e:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z12pwm_10bit_imm>
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <_Z12pwm_10bit_nmm>:
}
void pwm_10bit_nm(uint32_t duty){
	//Non Inverting Mode
	// Frequency = F_cpu/ 1024 = 16*10^6/ 1024 = 15625 HZ
	// duty cycle: OCR1A = 1024D/100 - 1 => D = (OCR1A+1)*100/256;
	OCR1A = ((1024*duty)/100)-1;
 174:	05 2e       	mov	r0, r21
 176:	5a e0       	ldi	r21, 0x0A	; 10
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	88 1f       	adc	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	5a 95       	dec	r21
 182:	d1 f7       	brne	.-12     	; 0x178 <_Z12pwm_10bit_nmm+0x4>
 184:	50 2d       	mov	r21, r0
 186:	24 e6       	ldi	r18, 0x64	; 100
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodsi4>
 192:	21 50       	subi	r18, 0x01	; 1
 194:	31 09       	sbc	r19, r1
 196:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 19a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = (1<<COM1A1) | (1<<WGM10) | (1<<WGM11); // Non-inverting Mode and Fast PWM 9-BIT
 19e:	83 e8       	ldi	r24, 0x83	; 131
 1a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | 1<<CS10; // Prescaler 1
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1aa:	08 95       	ret

000001ac <__vector_2>:
	if (bit_is_clear(PIND,PD2)){
		duty1 += 10;
	}
	pwm_10bit_im(duty1);
}
ISR(INT1_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	80 e7       	ldi	r24, 0x70	; 112
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <__vector_2+0x28>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <__vector_2+0x32>
 1de:	00 00       	nop
	_delay_ms(50);
	if (bit_is_clear(PIND,PD3)){
 1e0:	4b 99       	sbic	0x09, 3	; 9
 1e2:	13 c0       	rjmp	.+38     	; 0x20a <__vector_2+0x5e>
		duty2 += 5;
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1f4:	05 96       	adiw	r24, 0x05	; 5
 1f6:	a1 1d       	adc	r26, r1
 1f8:	b1 1d       	adc	r27, r1
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 202:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 206:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}
	pwm_10bit_nm(duty2);
 20a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 212:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 216:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 21a:	0e 94 ba 00 	call	0x174	; 0x174 <_Z12pwm_10bit_nmm>
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__udivmodsi4>:
 240:	a1 e2       	ldi	r26, 0x21	; 33
 242:	1a 2e       	mov	r1, r26
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	fd 01       	movw	r30, r26
 24a:	0d c0       	rjmp	.+26     	; 0x266 <__udivmodsi4_ep>

0000024c <__udivmodsi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	ee 1f       	adc	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	a2 17       	cp	r26, r18
 256:	b3 07       	cpc	r27, r19
 258:	e4 07       	cpc	r30, r20
 25a:	f5 07       	cpc	r31, r21
 25c:	20 f0       	brcs	.+8      	; 0x266 <__udivmodsi4_ep>
 25e:	a2 1b       	sub	r26, r18
 260:	b3 0b       	sbc	r27, r19
 262:	e4 0b       	sbc	r30, r20
 264:	f5 0b       	sbc	r31, r21

00000266 <__udivmodsi4_ep>:
 266:	66 1f       	adc	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a 94       	dec	r1
 270:	69 f7       	brne	.-38     	; 0x24c <__udivmodsi4_loop>
 272:	60 95       	com	r22
 274:	70 95       	com	r23
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	bd 01       	movw	r22, r26
 280:	cf 01       	movw	r24, r30
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
