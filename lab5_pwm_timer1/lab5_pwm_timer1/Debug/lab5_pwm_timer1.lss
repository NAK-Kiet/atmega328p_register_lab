
lab5_pwm_timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000652  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ba  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019f  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 88 00 	call	0x110	; 0x110 <main>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z12pwm_10bit_nmmm>:
	// OCR1B = 1023 - 1024*D/100;
	OCR1B = 1023 - ((1024*duty)/100);
	TCCR1A = (1<<COM1B1)| (1<<COM1B0) | (1<<WGM10) | 1<<WGM11; // Inverting Mode and Fast PWM 10-BIT
	TCCR1B = (1<<WGM12) | 1<<CS10; // Prescaler 1
}
void pwm_10bit_nm(uint32_t duty1, uint32_t duty2 ){
  80:	8f 92       	push	r8
  82:	9f 92       	push	r9
  84:	af 92       	push	r10
  86:	bf 92       	push	r11
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	69 01       	movw	r12, r18
  92:	7a 01       	movw	r14, r20
	//Non Inverting Mode
	// Frequency = F_cpu/ 1024 = 16*10^6/ 1024 = 15625 HZ
	// duty cycle: OCR1A = 1024D/100 - 1 => D = (OCR1A+1)*100/256;
	OCR1A = ((1024*duty1)/100)-1;
  94:	05 2e       	mov	r0, r21
  96:	5a e0       	ldi	r21, 0x0A	; 10
  98:	66 0f       	add	r22, r22
  9a:	77 1f       	adc	r23, r23
  9c:	88 1f       	adc	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	5a 95       	dec	r21
  a2:	d1 f7       	brne	.-12     	; 0x98 <_Z12pwm_10bit_nmmm+0x18>
  a4:	50 2d       	mov	r21, r0
  a6:	0f 2e       	mov	r0, r31
  a8:	f4 e6       	ldi	r31, 0x64	; 100
  aa:	8f 2e       	mov	r8, r31
  ac:	91 2c       	mov	r9, r1
  ae:	a1 2c       	mov	r10, r1
  b0:	b1 2c       	mov	r11, r1
  b2:	f0 2d       	mov	r31, r0
  b4:	a5 01       	movw	r20, r10
  b6:	94 01       	movw	r18, r8
  b8:	0e 94 96 00 	call	0x12c	; 0x12c <__udivmodsi4>
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	31 09       	sbc	r19, r1
  c0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = ((1024*duty2)/100)-1;
  c8:	c7 01       	movw	r24, r14
  ca:	b6 01       	movw	r22, r12
  cc:	05 2e       	mov	r0, r21
  ce:	5a e0       	ldi	r21, 0x0A	; 10
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	88 1f       	adc	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	5a 95       	dec	r21
  da:	d1 f7       	brne	.-12     	; 0xd0 <_Z12pwm_10bit_nmmm+0x50>
  dc:	50 2d       	mov	r21, r0
  de:	a5 01       	movw	r20, r10
  e0:	94 01       	movw	r18, r8
  e2:	0e 94 96 00 	call	0x12c	; 0x12c <__udivmodsi4>
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	31 09       	sbc	r19, r1
  ea:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  ee:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10) | (1<<WGM11); // Non-inverting Mode and Fast PWM 10-BIT
  f2:	83 ea       	ldi	r24, 0xA3	; 163
  f4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | 1<<CS10; // Prescaler 1
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	9f 90       	pop	r9
 10c:	8f 90       	pop	r8
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRB |= 1<<PB1 | 1<< PB2;
 110:	84 b1       	in	r24, 0x04	; 4
 112:	86 60       	ori	r24, 0x06	; 6
 114:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		//pwm_10bit_im(30);
		pwm_10bit_nm(50, 30);  // PB1 = 50% and PB2 = 30%
 116:	2e e1       	ldi	r18, 0x1E	; 30
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	62 e3       	ldi	r22, 0x32	; 50
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 40 00 	call	0x80	; 0x80 <_Z12pwm_10bit_nmmm>
 12a:	f5 cf       	rjmp	.-22     	; 0x116 <main+0x6>

0000012c <__udivmodsi4>:
 12c:	a1 e2       	ldi	r26, 0x21	; 33
 12e:	1a 2e       	mov	r1, r26
 130:	aa 1b       	sub	r26, r26
 132:	bb 1b       	sub	r27, r27
 134:	fd 01       	movw	r30, r26
 136:	0d c0       	rjmp	.+26     	; 0x152 <__udivmodsi4_ep>

00000138 <__udivmodsi4_loop>:
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	ee 1f       	adc	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	a2 17       	cp	r26, r18
 142:	b3 07       	cpc	r27, r19
 144:	e4 07       	cpc	r30, r20
 146:	f5 07       	cpc	r31, r21
 148:	20 f0       	brcs	.+8      	; 0x152 <__udivmodsi4_ep>
 14a:	a2 1b       	sub	r26, r18
 14c:	b3 0b       	sbc	r27, r19
 14e:	e4 0b       	sbc	r30, r20
 150:	f5 0b       	sbc	r31, r21

00000152 <__udivmodsi4_ep>:
 152:	66 1f       	adc	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	88 1f       	adc	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	1a 94       	dec	r1
 15c:	69 f7       	brne	.-38     	; 0x138 <__udivmodsi4_loop>
 15e:	60 95       	com	r22
 160:	70 95       	com	r23
 162:	80 95       	com	r24
 164:	90 95       	com	r25
 166:	9b 01       	movw	r18, r22
 168:	ac 01       	movw	r20, r24
 16a:	bd 01       	movw	r22, r26
 16c:	cf 01       	movw	r24, r30
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
