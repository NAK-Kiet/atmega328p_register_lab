
lab3_External_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  0000105d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#define  F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <util/delay.h>
ISR(INT0_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <__vector_1+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <__vector_1+0x20>
  a0:	00 00       	nop
	_delay_ms(50);
	if (bit_is_clear(PIND,PD2)){
  a2:	4a 99       	sbic	0x09, 2	; 9
  a4:	04 c0       	rjmp	.+8      	; 0xae <__vector_1+0x2e>
		PORTD ^= 1<<PD4;
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	89 27       	eor	r24, r25
  ac:	8b b9       	out	0x0b, r24	; 11
	}
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	2f 91       	pop	r18
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_2>:

ISR(INT1_vect){
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <__vector_2+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_2+0x20>
  de:	00 00       	nop
	_delay_ms(50);
	if (bit_is_clear(PIND,PD3)){
  e0:	4b 99       	sbic	0x09, 3	; 9
  e2:	04 c0       	rjmp	.+8      	; 0xec <__vector_2+0x2e>
		PORTD ^= 1<<PD4;
  e4:	9b b1       	in	r25, 0x0b	; 11
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	89 27       	eor	r24, r25
  ea:	8b b9       	out	0x0b, r24	; 11
	}
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:

int main(void)
{
	/* Replace with your application code */
	DDRD = 0b00110000;
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	8a b9       	out	0x0a, r24	; 10
	EIMSK = 1<<INT0 | 1<<INT1; //Enable interrupt 0 and 1
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	8d bb       	out	0x1d, r24	; 29
	EICRA = 1<<ISC01 | 1<<ISC11 ; // Detect falling edge for both INT0 and INT1
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	sei(); //enable global interrupt
 10a:	78 94       	sei
	while (1)
	{
		PORTD ^= 1<<PD4;
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	89 27       	eor	r24, r25
 112:	8b b9       	out	0x0b, r24	; 11
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x1e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x28>
 124:	00 00       	nop
 126:	f2 cf       	rjmp	.-28     	; 0x10c <main+0x10>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
