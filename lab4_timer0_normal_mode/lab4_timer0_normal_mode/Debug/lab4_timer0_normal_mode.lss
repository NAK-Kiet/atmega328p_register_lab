
lab4_timer0_normal_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d5  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000649  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000257  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_1ms>:
		
    }
}

void delay_1ms(){
	TCCR0A = 0x00;
  80:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 1<<CS00 | 1<< CS01;
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	85 bd       	out	0x25, r24	; 37
	// Generate a 1 delay 
	// delay = 256 - (16*10^6 * 10^-3)/64 = 256 - 250
	TCNT0 = 6;
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	86 bd       	out	0x26, r24	; 38
	
	while ((TIFR0 & (1<<TOV0)) == 0);
  8a:	a8 9b       	sbis	0x15, 0	; 21
  8c:	fe cf       	rjmp	.-4      	; 0x8a <delay_1ms+0xa>
	TIFR0 = 0x01;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 95       	ret

00000094 <delay_1s>:
}

void delay_1s(){
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	for (int i=1; i<=1000;i++){
  98:	c1 e0       	ldi	r28, 0x01	; 1
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <delay_1s+0x10>
		delay_1ms();
  9e:	0e 94 40 00 	call	0x80	; 0x80 <delay_1ms>
	while ((TIFR0 & (1<<TOV0)) == 0);
	TIFR0 = 0x01;
}

void delay_1s(){
	for (int i=1; i<=1000;i++){
  a2:	21 96       	adiw	r28, 0x01	; 1
  a4:	c9 3e       	cpi	r28, 0xE9	; 233
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	d8 07       	cpc	r29, r24
  aa:	cc f3       	brlt	.-14     	; 0x9e <delay_1s+0xa>
		delay_1ms();
	}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <main>:
void delay_1ms();
void delay_1s();
int main(void)
{
    /* Replace with your application code */
	DDRB = 1<<PB5;
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		PORTB ^= 1<<PB5;
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	89 27       	eor	r24, r25
  bc:	85 b9       	out	0x05, r24	; 5
		delay_1s();
  be:	0e 94 4a 00 	call	0x94	; 0x94 <delay_1s>
  c2:	f9 cf       	rjmp	.-14     	; 0xb6 <main+0x4>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
